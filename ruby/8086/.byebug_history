exit
continue
op.to_s 16
op
continue
self.cs
self.w
self.d
self.cs
0xdb
op.to_s 16
op
exit
dst
0xe9
op.to_s(16)
op.to_s(16).to_i(16)
op
exit
get_mem_at_addr(W, get_addr(cs, ip))
get_mem_at_addr(B, get_addr(cs, ip))
exit
op.nil?
exit
op.nil?
exit
op.nil?
continue
self.get_mem_at_addr W, get_addr(cs, ip + 0)
self.memory[59867]
self.get_mem_at_addr W, get_addr(cs, ip + 0)
self.get_memory_at_addr W, get_addr(cs, ip + 0)
self.memory[self.ip]
dst
self.ip
exit
dst
get_mem(W)
memory[64006]
ip + dst & 0xffff
dst
continue
self.queue
exit
self.queue
continue
self.queue
continue
self.queue
continue
self.queue
continue
self.queue
continue
self.queue
exit
self.queue
queue
self.queue
continue
x
self.queue
continue
self.queue
continue
self.queue
continue
w
x
continue
self.queue
continue
self.queue
continue
self.queue
exit
self.queue
continue
self.queue
continue
self.queue
continue
self.queue
op
continue
x << 32 - BITS[w] >> 32 - BITS[w]
x << 32 - BITS[w] >> 32
x << 32 - BITS[w]
x << 32
x << 32 - BITS[w] >> 32 - BITS[w]
continue
self.queue
continue
where
x
w
exit
op
self.queue
continue
x
x << 32 - BITS[w] >> 32 - BITS[w]
BITS[w]
w
exit
self.memory[ip]
queue
ip
continue
queue
exit
get_mem_at_addr(B, get_addr(cs, ip))
get_mem_at_addr(B, get_addr(cs, ip - 1))
get_mem_at_addr(B, get_addr(cs, ip -1))
get_mem_at_addr(B, get_addr(cs, ip + 10))
get_mem_at_addr(B, get_addr(cs, ip + i))
exit
continue
get_addr(cs, ip + 0)
exit
self.memory[self.ip+1]
self.memory[self.ip]
get_mem_at_addr(B, get_addr(cs, ip + 0))
exit
self.queue
exit
self.queue
op.nil?
exit
queue
op
continue
0xf4
self.queue
self.ip
exit
b[0]
bytes[0]
exit
0xf4
self.queue
op
exit
op
exit
continue
addr
exit
clocks
op
exit
self.clocks
rep
exit
break
op
exit
get_mem_at_addr(B, get_addr(self.cs, self.ip - 100))
get_mem_at_addr(B, get_addr(self.cs, self.ip - 1))
get_mem_at_addr(B, get_addr(self.cs, self.ip + 1))
self.memory[self.ip-1&0xffff]
self.memory[self.ip-1]
self.ip
clocks
self.queue
op
exit
rep
continue
rep
0xab
op
o0
exit
0xaa
0xab
op
where
exit
where
help
line
where am i
exit
self.queue
rep
self.clocks
continue
self.clocks
continue
self.queue
op
continue
op
self.queue
continue
self.queue
continue
op
self.queue
continue
op
continue
op
continue
op
continue
exit
get_mem_at_addr(B, get_addr(self.cs, self.ip + 1))
get_mem_at_addr(B, get_addr(cs, ip + i))
self.memory[self.ip]
self.ip
op & W
self.w
w
d
op
op & W
w
d
op
self.ip
continue
get_mem_at_addr(B, get_addr(cs, ip + 1))
get_mem_at_addr(B, get_addr(cs, ip-2))
get_mem_at_addr(B, get_addr(cs, ip-1))
get_mem_at_addr(B, get_addr(cs, ip))
get_mem_at_addr(B, get_addr(cs, ip + i))
continue
ip
exit
get_mem_at_addr(B, get_addr(cs, ip + i))
continue
ip - 1 & 0xffff
self.ip
continue
get_mem_at_addr(B, get_addr(cs, ip + i))
continue
self.memory[self.ip]
self.ip
continue
byte
i
exit
memory[ip-2]
memory[ip-1]
memory[ip]
memory[ip+1]
memory[1105905]
get_addr(cs, ip + 1)
ip
cs
B
get_mem_at_addr(B, get_addr(cs, ip + i))
get_mem_at_addr(B, get_addr(cs, ip + i)
i
